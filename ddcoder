#!/usr/bin/python3

import struct
from dataclasses import dataclass

#   /usr/include/linux/input.h
#
#   struct input_event {
#   #if (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) && !defined(__KERNEL__)
#       struct timeval time;
#   #define input_event_sec time.tv_sec             // 8-byte signed long long
#   #define input_event_usec time.tv_usec           // 8-byte signed long long
#   #else
#       __kernel_ulong_t __sec;
#   #if defined(__sparc__) && defined(__arch64__)
#       unsigned int __usec;
#       unsigned int __pad;
#   #else
#       __kernel_ulong_t __usec;
#   #endif
#   #define input_event_sec  __sec
#   #define input_event_usec __usec
#   #endif
#       __u16 type;                                 // 2-byte unsigned short
#       __u16 code;                                 // 2-byte unsigned short
#       __s32 value;                                // 4-byte signed int
#   };
#

#####################
#                   #
#      CONFIG       #
#                   #
#####################

# https://docs.python.org/3/library/struct.html
ISTRUCT = 'q q H H i'  # tv_sec, tv_usec, type_code, code, value
SSIZE = struct.calcsize(ISTRUCT)

# https://www.kernel.org/doc/html/v4.14/input/event-codes.html
# /usr/include/linux/input-event-codes.h (EV_KEY)
EV = {
    0x01: 'keyboard',
    0x11: 'led',
}

KVALS = {
    0: 'release',
    1: 'depress',
    2: 'repeat',
}

KCODES = {
    17: 'w',
    30: 'a',
    31: 's',
    32: 'd',
}

LEDCODES = {
    0x01: 'caps',
}

#####################
#                   #
#      CONFIG       #
#                   #
#####################

@dataclass
class InputEvent:
    tv_sec: int
    tv_usec: int
    type_code: int
    code: int
    value: int


class Decoder:
    def __init__(
        self,
        input_struct=ISTRUCT,
        struct_size=SSIZE,
        event=EV,
        key_vals=KVALS,
        key_codes=KCODES,
        led_codes=LEDCODES,
    ):
        self.input_struct = input_struct
        self.struct_size = struct_size
        self.event = event
        self.key_vals = key_vals
        self.key_codes = key_codes
        self.led_codes = led_codes
        self.capslock = False
        self.handlers = {
            'keyboard': self.handle_keyboard_event,
            'led': self.handle_led_event,
        }

    def handle_keyboard_event(self, event):
        key_val = self.key_vals.get(event.value, f"{event.value}")
        if key_val == 'depress':
            key_name = self.key_codes.get(event.code, f"{event.code}")
            character = key_name.upper() if self.capslock else key_name.lower()
            print(f"{character}")

    def handle_led_event(self, event):
        led_name = self.led_codes.get(event.code, f"Unknown({event.code})")
        if led_name == 'caps':
            self.capslock = bool(event.value)

    def proc_file(self):
        with open('out.swp', 'rb') as infile:
            while True:
                block = infile.read(self.struct_size)
                if not block:
                    break

                event_data = struct.unpack(self.input_struct, block)
                event = InputEvent(*event_data)

                event_type = self.event.get(event.type_code)
                handler = self.handlers.get(event_type)

                if handler:
                    handler(event)
                else:
                    pass


if __name__ == "__main__":
    decoder = Decoder()
    decoder.proc_file()


