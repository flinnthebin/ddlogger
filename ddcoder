#!/usr/bin/python3

import struct

#   /usr/include/linux/input.h
#
#   struct input_event {
#   #if (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) && !defined(__KERNEL__)
#       struct timeval time;
#   #define input_event_sec time.tv_sec             // 8-byte signed long long
#   #define input_event_usec time.tv_usec           // 8-byte signed long long
#   #else
#       __kernel_ulong_t __sec;
#   #if defined(__sparc__) && defined(__arch64__)
#       unsigned int __usec;
#       unsigned int __pad;
#   #else
#       __kernel_ulong_t __usec;
#   #endif
#   #define input_event_sec  __sec
#   #define input_event_usec __usec
#   #endif
#       __u16 type;                                 // 2-byte unsigned short
#       __u16 code;                                 // 2-byte unsigned short
#       __s32 value;                                // 4-byte signed int
#   };
#

#####################
#                   #
#      CONFIG       #
#                   #
#####################

# https://docs.python.org/3/library/struct.html
ISTRUCT = 'q q H H i'  # tv_sec, tv_usec, type, code, value
SSIZE = struct.calcsize(ISTRUCT)

# https://www.kernel.org/doc/html/v4.14/input/event-codes.html
# /usr/include/linux/input-event-codes.h (EV_KEY)
EV = {
    0x01: 'keyboard'
}

KVALS = {
    0: 'release',
    1: 'depress',
    2: 'repeat',
}

KCODES = {
    17: 'W',
    30: 'A',
    31: 'S',
    32: 'D',
}

#####################
#                   #
#      CONFIG       #
#                   #
#####################

class Decoder:
    def __init__(self, input_struct=ISTRUCT, struct_size=SSIZE, event=EV, key_vals=KVALS, key_codes=KCODES):
        self.input_struct = input_struct
        self.struct_size = struct_size
        self.event = event
        self.key_vals = key_vals
        self.key_codes = key_codes

    def proc_file(self):
        with open('out.swp', 'rb') as infile:
            while True:
                block = infile.read(self.struct_size)
                if not block:
                    break

                (tv_sec, tv_usec, type, code, value) = struct.unpack(self.input_struct, block)
                event_type = self.event.get(type, f"{type}")
                if event_type == 'keyboard':
                    key_val = self.key_vals.get(value, f"{value}")
                    if key_val == 'depress':
                        key_name = self.key_codes.get(code, f"{code}")
                        print(f"{key_name}")
                    else:
                        pass
                else:
                    pass

if __name__ == "__main__":
    decoder = Decoder()
    decoder.proc_file()

